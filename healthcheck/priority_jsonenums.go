// generated by jsonenums -type=Priority; DO NOT EDIT

package healthcheck

import (
	"encoding/json"
	"fmt"
)

var (
	_PriorityNameToValue = map[string]Priority{
		"Pager":   Pager,
		"Email":   Email,
		"Warning": Warning,
	}

	_PriorityValueToName = map[Priority]string{
		Pager:   "Pager",
		Email:   "Email",
		Warning: "Warning",
	}
)

func init() {
	var v Priority
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PriorityNameToValue = map[string]Priority{
			interface{}(Pager).(fmt.Stringer).String():   Pager,
			interface{}(Email).(fmt.Stringer).String():   Email,
			interface{}(Warning).(fmt.Stringer).String(): Warning,
		}
	}
}

// MarshalJSON is generated so Priority satisfies json.Marshaler.
func (r Priority) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PriorityValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Priority: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Priority satisfies json.Unmarshaler.
func (r *Priority) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Priority should be a string, got %s", data)
	}
	v, ok := _PriorityNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Priority %q", s)
	}
	*r = v
	return nil
}
