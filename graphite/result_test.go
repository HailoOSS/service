package graphite

import (
	"testing"
)

var data = `[{"target": "asPercent(stats.com.hailocab.service.test.results.runs.6b5809d2-dc68-49a9-64fd-049a5bbddee9.assert.com-hailocab-test-benchmark-noop.success, sumSeries(stats.com.hailocab.service.test.results.runs.6b5809d2-dc68-49a9-64fd-049a5bbddee9.assert.com-hailocab-test-benchmark-noop.success))", "datapoints": [[100.0, 1390493710], [100.0, 1390493720], [100.0, 1390493730], [100.0, 1390493740], [100.0, 1390493750], [100.0, 1390493760], [100.0, 1390493770], [100.0, 1390493780], [100.0, 1390493790], [100.0, 1390493800], [100.0, 1390493810], [100.0, 1390493820], [100.0, 1390493830], [100.0, 1390493840], [100.0, 1390493850], [100.0, 1390493860], [100.0, 1390493870], [100.0, 1390493880], [100.0, 1390493890], [100.0, 1390493900], [100.0, 1390493910], [100.0, 1390493920], [100.0, 1390493930], [100.0, 1390493940], [100.0, 1390493950], [100.0, 1390493960], [100.0, 1390493970], [100.0, 1390493980], [100.0, 1390493990], [100.0, 1390494000], [100.0, 1390494010], [100.0, 1390494020], [100.0, 1390494030], [100.0, 1390494040], [100.0, 1390494050], [100.0, 1390494060], [100.0, 1390494070], [100.0, 1390494080], [100.0, 1390494090], [100.0, 1390494100], [100.0, 1390494110], [100.0, 1390494120], [100.0, 1390494130], [100.0, 1390494140], [100.0, 1390494150], [100.0, 1390494160], [100.0, 1390494170], [100.0, 1390494180], [100.0, 1390494190], [100.0, 1390494200], [100.0, 1390494210], [100.0, 1390494220], [100.0, 1390494230], [100.0, 1390494240], [100.0, 1390494250], [100.0, 1390494260], [100.0, 1390494270], [100.0, 1390494280], [100.0, 1390494290], [100.0, 1390494300], [null, 1390494310], [null, 1390494320], [null, 1390494330], [null, 1390494340], [null, 1390494350], [null, 1390494360]]}, {"target": "movingAverage(scale(stats.timers.com.hailocab.service.test.results.runs.6b5809d2-dc68-49a9-64fd-049a5bbddee9.measure.com-hailocab-test-benchmark-noop.upper_90,1e-06),100)", "datapoints": [[123.81858, 1390493710], [75.123307, 1390493720], [61.97287033333333, 1390493730], [49.19369625, 1390493740], [46.4508992, 1390493750], [42.113842500000004, 1390493760], [40.078864, 1390493770], [36.11636475, 1390493780], [33.45206711111111, 1390493790], [31.0200804, 1390493800], [28.721741272727275, 1390493810], [27.515899000000005, 1390493820], [29.67372161538462, 1390493830], [28.13545728571429, 1390493840], [26.99589386666667, 1390493850], [25.931633500000004, 1390493860], [25.03102523529412, 1390493870], [24.179452722222223, 1390493880], [23.799854368421055, 1390493890], [23.771000100000002, 1390493900], [23.045955000000003, 1390493910], [23.42022481818182, 1390493920], [22.834543086956522, 1390493930], [22.3266495, 1390493940], [22.080648199999995, 1390493950], [21.681619576923076, 1390493960], [21.33630496296296, 1390493970], [20.94603557142857, 1390493980], [20.707349551724135, 1390493990], [20.444590799999997, 1390494000], [20.524413129032254, 1390494010], [20.241198187499997, 1390494020], [19.838085727272723, 1390494030], [19.491392558823527, 1390494040], [19.183275599999998, 1390494050], [18.981513666666665, 1390494060], [18.658994648648648, 1390494070], [18.411443789473683, 1390494080], [18.23891769230769, 1390494090], [18.085297075, 1390494100], [18.21739331707317, 1390494110], [18.705664261904765, 1390494120], [18.76020034883721, 1390494130], [18.49123593181818, 1390494140], [18.2495394, 1390494150], [18.11010991304348, 1390494160], [17.892595531914893, 1390494170], [17.6663235625, 1390494180], [17.720299918367346, 1390494190], [17.563576979999997, 1390494200], [17.366745470588235, 1390494210], [17.21738419230769, 1390494220], [17.10393733962264, 1390494230], [16.958800185185183, 1390494240], [17.051217636363635, 1390494250], [16.961894107142854, 1390494260], [16.8530308245614, 1390494270], [16.73733924137931, 1390494280], [16.856152847457626, 1390494290], [17.1774505, 1390494300], [17.264446147540983, 1390494310], [17.264446147540983, 1390494320], [17.264446147540983, 1390494330], [17.264446147540983, 1390494340], [17.264446147540983, 1390494350], [17.264446147540983, 1390494360]]}]`

func TestMinMaxSum(t *testing.T) {
	r, _ := unmarshalResult([]byte(data))
	s := r.TargetN(0)

	if s.Max() != 100.0 {
		t.Errorf("Max value %v wrong", s.Max())
	}
	if s.Min() != 100.0 {
		t.Errorf("Min value %v wrong", s.Min())
	}
	if s.Sum() != 6000.0 {
		t.Errorf("Sum %v wrong", s.Sum())
	}

	s = r.TargetN(1)
	if s.Max() != 123.81858 {
		t.Errorf("Max value %v wrong", s.Max())
	}
	if s.Min() != 16.73733924137931 {
		t.Errorf("Min value %v wrong", s.Min())
	}
	if s.Sum() != 1668.8222720490912 {
		t.Errorf("Sum %v wrong", s.Sum())
	}
}

func TestTargetLike(t *testing.T) {
	r, _ := unmarshalResult([]byte(data))
	s := r.TargetLike("movingAverage(scale(stats.timers")
	if s.Sum() != 1668.8222720490912 {
		t.Errorf("Sum %v wrong", s.Sum())
	}
}
